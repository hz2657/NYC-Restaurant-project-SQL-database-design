
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
from sqlalchemy import create_engine

df = pd.read_csv('C:/Users/Huizhe ZHU/Desktop/insepection_7.csv',low_memory=False)


# define connection url
conn_url = 'postgresql://postgres:123@localhost/final_project'

# create an engine that connect to postgre-sql
engine = create_engine(conn_url)

# establish a connection
connection = engine.connect()


delete = """
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
"""
results = connection.execute(delete)



#rename df

df['camis'] = df['CAMIS']
df['restaurant_name_violations'] = df['DBA_x']
df['premise_name_liqour_license'] = df['Premise Name']
df['zip'] = df['ZIPCODE']
df['board_address'] = df['Board Address']
df['phone_number'] = df['PHONE']
df['cuisine_name'] = df['CUISINE.DESCRIPTION']
df['board_id'] = df['Community Board']
df['borough_name'] = df['Borough']
df['district_manager'] = df['District Manager']
df['violation_code'] = df['VIOLATION.CODE']
df['violation_description'] = df['VIOLATION.DESCRIPTION']
df['critical_flag'] = df['CRITICAL.FLAG']
df['license_class_code'] = df['License Class Code']
df['license_type_code'] = df['License Type Code']
df['address'] = df['Address']
df['score'] = df['SCORE']
df['grade'] = df['GRADE']
df['inspection_date'] = df['INSPECTION.DATE']
df['license_expiration_date'] = df['License Expiration Date']
df['complaint_type'] = df['Complaint Type']
df['descriptor'] = df['Descriptor']
df['food_poisoning_complaint_id'] = df['Unique Key']
df['close_date'] = df['Closed Date']
df['status'] = df['Status']
df['due_date'] = df['Due Date']
df['location_type'] = df['Location Type']
df['chair'] = df['Chair']
df['license_issued_date'] = df['License Issued Date']
df['incident_created_date'] = df['Created Date']

#create tables 
stmt = """

CREATE TABLE  boroughs(
    borough_id     integer,
    borough_name   varchar(15) NOT NULL UNIQUE,
    PRIMARY KEY (borough_id)
);

CREATE TABLE location_types (
    location_type_id  integer NOT NULL,
    location_type       varchar (100) UNIQUE,
    PRIMARY KEY(location_type_id)
);

CREATE TABLE community_board (
    board_id        varchar(30) NOT NULL,
    chair           varchar(70),
    district_manager  varchar(70),
    board_address   varchar(100),
    PRIMARY KEY(board_id)
);

CREATE TABLE restaurants (
    camis              integer,
    restaurant_name_violations    varchar(100) NOT NULL,
    location_type      varchar (100),
    address            varchar(200) NOT NULL,
    borough_name   varchar(15) NOT NULL,
    zip                integer,
    phone_number       varchar (12),
    board_id        varchar(30) NOT NULL,
    PRIMARY KEY (camis),
    FOREIGN KEY(location_type) REFERENCES location_types(location_type),
    FOREIGN KEY(borough_name) REFERENCES boroughs(borough_name),
    FOREIGN KEY(board_id) REFERENCES community_board(board_id)
);

CREATE TABLE violations (
    violation_code        varchar(4) NOT NULL,
    violation_description text,
    critical_flag         varchar(1) CHECK (critical_flag IN ('Y', 'N')),
    PRIMARY KEY (violation_code)
);

CREATE TABLE license_type (
    license_id      integer,   
    license_class_code     char(3) NOT NULL,
    license_type_code varchar(2) NOT NULL,
    PRIMARY KEY (license_id)
);

CREATE TABLE cuisines (
    cuisine_id    integer,
    cuisine_name   varchar(80) NOT NULL,
    PRIMARY KEY (cuisine_id)
);


CREATE TABLE incidents (
    food_poisoning_complaint_id    integer,
    descriptor     varchar(100) CHECK (descriptor IN ('1 or 2', '3 or More')),
    PRIMARY KEY (food_poisoning_complaint_id)
);

CREATE TABLE restaurants_violations (
    camis             integer, 
    violation_code    varchar(4),
    grade             varchar(1),
    score             integer,
    inspection_date   date,
    PRIMARY KEY (camis, violation_code, inspection_date),
    FOREIGN KEY (camis) REFERENCES restaurants(camis),
    FOREIGN KEY (violation_code) REFERENCES violations(violation_code)
);

CREATE TABLE restaurants_licenses(
    camis           integer,
    license_id      integer,   
    license_issued_date      date,
    license_expiration_date date NOT NULL,
    PRIMARY KEY (camis, license_id,license_issued_date),
    FOREIGN KEY (camis) REFERENCES restaurants(camis),
    FOREIGN KEY (license_id) REFERENCES license_type(license_id)
);

CREATE TABLE restaurants_incidents(
    camis       integer, 
    food_poisoning_complaint_id integer,
    incident_created_date varchar(50),
    status      varchar(20) NOT NULL,
    due_date    date,
    close_date  date,
    PRIMARY KEY (camis, food_poisoning_complaint_id, incident_created_date),
    FOREIGN KEY (camis) REFERENCES restaurants(camis),
    FOREIGN KEY (food_poisoning_complaint_id) REFERENCES incidents(food_poisoning_complaint_id)
);

CREATE TABLE restaurants_cuisine(
    camis         integer,    
    cuisine_id    integer,
    PRIMARY KEY (camis, cuisine_id),
    FOREIGN KEY (camis) REFERENCES restaurants(camis),
    FOREIGN KEY (cuisine_id) REFERENCES cuisines(cuisine_id)       
);

"""
#execute table creation
results = connection.execute(stmt)

restaurants=df[['camis', 'restaurant_name_violations','location_type', 'address' ,'borough_name','zip','phone_number', 'board_id']]
restaurants= restaurants.drop_duplicates(subset='camis').reset_index()
restaurants= restaurants[['camis', 'restaurant_name_violations' ,'location_type' ,'address','borough_name','zip','phone_number','board_id']]

violations = df[['violation_code','violation_description','critical_flag']]
violations = violations.drop_duplicates(subset='violation_code').dropna(subset=['violation_code']).reset_index()
violations = violations[['violation_code','violation_description','critical_flag']]

license_type = df[['license_class_code','license_type_code']]
license_type = license_type.drop_duplicates().reset_index()
license_type['license_id'] = license_type.index
license_type = license_type[['license_id', 'license_class_code','license_type_code']]

incidents = df[['food_poisoning_complaint_id','descriptor']].drop_duplicates().reset_index()
incidents = incidents[['food_poisoning_complaint_id', 'descriptor']]

location_types = pd.DataFrame(df['location_type'].drop_duplicates()).reset_index()
location_types['location_type_id'] = location_types.index
location_types=location_types[['location_type_id','location_type']]

new_df = pd.DataFrame(df.cuisine_name.str.split('/').tolist(), index=df.camis).stack()
new_df = new_df.reset_index([0, 'camis']).drop_duplicates()
new_df.columns = ['camis', 'cuisine_name']

cuisines = new_df[['cuisine_name']].drop_duplicates().reset_index()
cuisines['cuisine_id'] = cuisines.index
cuisines = cuisines[['cuisine_id','cuisine_name']]

restaurant_cuisine = pd.merge(restaurants , new_df, on = 'camis', how = 'right')
restaurant_cuisine = restaurant_cuisine[['camis','cuisine_name']]

restaurants_violations_wip = df[['camis','violation_code','score','grade','inspection_date']].drop_duplicates().dropna(subset=['violation_code']).reset_index()
restaurants_violations = restaurants_violations_wip[['camis','violation_code','score','grade','inspection_date']]

restaurants_licenses_wip=df[['camis', 'license_class_code','license_type_code' ,'license_issued_date', 'license_expiration_date']].drop_duplicates().reset_index()
restaurants_licenses_wip=pd.merge(restaurants_licenses_wip, license_type, on = ['license_class_code','license_type_code']).drop(columns = ['license_class_code','license_type_code'])
restaurants_licenses = restaurants_licenses_wip[['camis','license_id','license_issued_date','license_expiration_date']]

restaurants_incidents=df[['camis','incident_created_date' ,'food_poisoning_complaint_id', 'status', 'due_date', 'close_date']]
restaurants_incidents=restaurants_incidents.drop_duplicates().reset_index()
restaurants_incidents = restaurants_incidents[['camis','incident_created_date', 'food_poisoning_complaint_id', 'status', 'due_date', 'close_date']]

boroughs = df[['borough_name']].drop_duplicates().reset_index()
boroughs['borough_id'] = boroughs.index
boroughs = boroughs[['borough_id','borough_name']]

community_board = df[['board_id', 'chair','district_manager', 'board_address']].drop_duplicates().reset_index()
community_board['district_manager'] = community_board['district_manager'].str.split('  ').str[0]
community_board = community_board[['board_id', 'chair','district_manager', 'board_address']]

license_type.to_sql(name='license_type', con=engine, if_exists='append', index=False)
location_types.to_sql(name='location_types', con=engine, if_exists='append', index=False)
boroughs.to_sql(name='boroughs', con=engine, if_exists='append', index=False)
community_board.to_sql(name='community_board', con=engine, if_exists='append', index=False)
restaurants.to_sql(name='restaurants', con=engine, if_exists='append', index=False)
violations.to_sql(name='violations', con=engine, if_exists='append', index=False)
cuisines.to_sql(name='cuisines', con=engine, if_exists='append', index=False)
incidents.to_sql(name='incidents', con=engine, if_exists='append', index=False)
restaurant_cuisine.to_sql(name='restaurant_cuisine', con=engine, if_exists='append', index=False)
restaurants_violations.to_sql(name='restaurants_violations', con=engine, if_exists='append', index=False)
restaurants_licenses.to_sql(name='restaurants_licenses', con=engine, if_exists='append', index=False)
restaurants_incidents.to_sql(name='restaurants_incidents', con=engine, if_exists='append', index=False)
